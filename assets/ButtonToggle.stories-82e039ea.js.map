{"version":3,"file":"ButtonToggle.stories-82e039ea.js","sources":["../../src/components/ButtonToggle/ButtonToggle.tsx"],"sourcesContent":["import React, { ReactNode, Children, useState } from \"react\";\n\nexport interface ButtonToggleRootProps {\n    children: ReactNode;\n    activeChild: 'left' | 'right';\n    onChange: (selectedValue: any)=> void;\n}\n\n /** Um botão é um controle que permite ao usuário se comunicar diretamente com o produto digital e enviar os comandos necessários para atingir um objetivo específico. */ \nfunction ButtonToggleRoot({ children, onChange, activeChild }: ButtonToggleRootProps) {\n\n    const handleLeftClick = () => {\n        onChange('left');\n    };\n\n    const handleRightClick = () => {\n        onChange('right');\n    };\n\n    return (\n        <div \n            className=\"\n                flex\n                h-10 \n                w-fit\n                rounded-lg\n                items-center\n                font-roboto \n                text-sm \n                border\n                border-brand-primary-dark\n            \"\n        >\n            {\n                Children.map(children, (child, idx) => {\n                    if (React.isValidElement(child)) {\n                        const childProps = {\n                            active: activeChild === 'left' ? true : false,\n                            onClick: handleLeftClick\n                        };\n                        if (child.type === ButtonToggleRight) {\n                            childProps.active = activeChild === 'right' ? true : false;\n                            childProps.onClick = handleRightClick;\n                        }\n                        return React.cloneElement(child, childProps);\n                    }\n                    return child;\n                })\n            }\n        </div>\n    );\n}\n\nexport interface ButtonToggleChildProps {\n    onClick?: () => void;\n    active?: boolean;\n    children: React.ReactNode;\n}\n\nfunction ButtonToggleLeft({ ...props }: ButtonToggleChildProps) {\n    return <ButtonToggleChild {...props}/>;\n}\n\nfunction ButtonToggleRight({ ...props }: ButtonToggleChildProps) {\n    return <ButtonToggleChild {...props}/>;\n}\n\nfunction ButtonToggleChild({ children, active=false, ...props }: ButtonToggleChildProps) {\n\n    const getStyle = (active: boolean) => {\n        let className = '';\n\n        switch (active) {\n            case true:\n                className = 'bg-brand-primary-dark text-neutral-light-base';\n                return className;\n\n            default:\n                className ='bg-neutral-light-base text-brand-primary-dark';\n                return className;\n        }\n    }\n\n    return (\n        <div \n            className={`\n                w-full \n                h-full \n                rounded-lg \n                p-4\n                flex\n                items-center\n                cursor-pointer\n                right\n                ${getStyle(active)}\n            `}\n            {...props}\n        >\n            {children}\n        </div>\n    );\n}\n\nButtonToggleRoot.displayName = 'ButtonToggle.Root';\nButtonToggleLeft.displayName = 'ButtonToggle.Left';\nButtonToggleRight.displayName = 'ButtonToggle.Right';\n\nexport const ButtonToggle = { \n    Root: ButtonToggleRoot,\n    Left: ButtonToggleLeft,\n    Right: ButtonToggleRight\n};\n"],"names":["ButtonToggleRoot","children","onChange","activeChild","handleLeftClick","handleRightClick","className","Children","map","child","idx","React","isValidElement","childProps","active","onClick","type","ButtonToggleRight","cloneElement","ButtonToggleLeft","props","ButtonToggleChild","getStyle","displayName","ButtonToggle","Root","Left","Right"],"mappings":"4VASA,SAASA,EAAiB,CAAEC,SAAAA,EAAUC,SAAAA,EAAUC,YAAAA,CAAmC,EAAG,CAElF,MAAMC,EAAkBA,EAAAA,IAAM,CAC1BF,EAAS,MAAM,CAAA,EADKE,mBAIlBC,EAAmBA,EAAAA,IAAM,CAC3BH,EAAS,OAAO,CAAA,EADKG,oBAIzB,SACI,MAAA,CACIC,UAAU,oGAUTL,SAGGM,EAASC,SAAAA,IAAIP,EAAU,CAACQ,EAAOC,IAAQ,CAC/BC,GAAAA,EAAMC,eAAeH,CAAK,EAAG,CAC7B,MAAMI,EAAa,CACfC,OAAQX,IAAgB,OACxBY,QAASX,CAAAA,EAETK,OAAAA,EAAMO,OAASC,IACJH,EAAAA,OAASX,IAAgB,QACpCU,EAAWE,QAAUV,GAElBM,EAAMO,aAAaT,EAAOI,CAAU,EAExCJ,OAAAA,CAAAA,CACV,CAAA,CAEH,CAEd,CA1CST,EAAAA,EAAAA,oBAkDT,SAASmB,EAAiB,CAAE,GAAGC,CAA8B,EAAG,CAC5D,SAAQC,EAAiB,CAAA,GAAKD,CAAAA,CAAQ,CAC1C,CAFSD,EAAAA,EAAAA,oBAIT,SAASF,EAAkB,CAAE,GAAGG,CAA8B,EAAG,CAC7D,SAAQC,EAAiB,CAAA,GAAKD,CAAAA,CAAQ,CAC1C,CAFSH,EAAAA,EAAAA,qBAIT,SAASI,EAAkB,CAAEpB,SAAAA,EAAUa,OAAAA,EAAO,GAAO,GAAGM,CAA8B,EAAG,CAgBrF,SACI,MAAA,CACId,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBHgB,EAACR,GAAoB,CAClC,IAAIR,EAAY,GAEhB,OAAQQ,EAAM,CACV,IAAK,GACW,OAAAR,EAAA,gDACLA,EAEX,QACe,OAAAA,EAAA,gDACJA,CAAU,CAAA,EAVZgB,YAyBMR,CAAM;AAAA,cACnB,GACEM,EAAKnB,SAAAA,CAAAA,CAGP,CAEd,CAlCSoB,EAAAA,EAAAA,qBAoCTrB,EAAiBuB,YAAc,oBAC/BJ,EAAiBI,YAAc,oBAC/BN,EAAkBM,YAAc,qBAEzB,MAAMC,EAAe,CACxBC,KAAMzB,EACN0B,KAAMP,EACNQ,MAAOV,CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}